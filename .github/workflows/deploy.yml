name: Deploy with DockerHub to Ubuntu Server

on:
  push:
    # branches: 해당 branch 에 push 될 시 build
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 현재 repository 안에서 checkout 
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          # Java JDK17 설치 및 환경변수 -> 17 버전으로 build 하기 위한 설정
          java-version: '17'
          
        # geadlew -> ubuntu 에서 실행 권한이 없는 경우 실행 권한 추가
        # +r 읽기, +w 쓰기, +x 실행
      - name: Set gradlew permissions
        run: chmod +x ./gradlew

        # .jar 생성
      - name: Build with Gradle
        run: ./gradlew clean build

        # docker login
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        
        # docker build: image 생성 -> dockerhub 에 전송
      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-app:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-app:latest

        # SSH -> 개인키를 가지고 AWS 에 접속
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

        # host 등록
      - name: Add known hosts
        run: ssh-keyscan -t ed25519 52.79.204.72 >> ~/.ssh/known_hosts

        # 실제 실행 과정
        # container 이름이 같으면 안됨
        # 1. 정지 2. 삭제 3. dockerhub 에서 읽기 4. 실행
      - name: Deploy on server using DockerHub image
        run: |
          ssh ubuntu@52.79.204.72 << 'EOF'
            docker stop spring-app || true
            docker rm spring-app || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-app:latest
            docker run -d --name spring-app -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/spring-app:latest
          EOF
